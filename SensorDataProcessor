/*
In this assignment, students will work to create a Github repository and upload the Java code 
provided below, which is inefficient and poorly written code. Then, use GitHub commands to clone 
the created repository. Each student must suggest and apply at least one strategy to clean, 
speed-up, and document the code. 
 */

 /* adding missing impors
 import java.io.BufferedWriter;
 import java.io.FileWriter;
 import java.io.IOException;
 OR....import java.io.*; for short
 */
 
 // Importing necessary classes for file input/output
 import java.io.*;

 public class SensorDataProcessor {
 
     // Sensor data and limits.
     public double[][][] data;  
     public double[][] limit;    
 
     // Constructor to initialize the sensor data and limits
     public SensorDataProcessor(double[][][] data, double[][] limit) {
         this.data = data;
         this.limit = limit;
     }
 
     // calculates average of sensor data 
     private double average(double[] array) {
         int i = 0;
         double val = 0;
         for (i = 0; i < array.length; i++) {
             val += array[i];
         }
 
         return val / array.length;
     }
 
     // calculate sensor data
     public void calculate(double d) {
 
         int i, j, k = 0;
         double[][][] data2 = new double[data.length][data[0].length][data[0][0].length];
 
         // Buffered Writer for writing calculated data to a file
         BufferedWriter out;
 
         // Write racing stats data into a file
         try {
             // adding -true- to append data into an existing file and not overwrite it, or create a new file if it doesn't exist
             out = new BufferedWriter(new FileWriter("RacingStatsData.txt",true));
 
             for (i = 0; i < data.length; i++) {
                 for (j = 0; j < data[0].length; j++) {
                     for (k = 0; k < data[0][0].length; k++) {
                         // Perform calculations on sensor data and limits
                         data2[i][j][k] = data[i][j][k] / d - Math.pow(limit[i][j], 2.0);
 
                         // Check conditions for data processing
                         if (average(data2[i][j]) > 10 && average(data2[i][j]) < 50)
                             break;
                         else if (Math.max(data[i][j][k], data2[i][j][k]) > data[i][j][k])
                             break;
                         else if (Math.pow(Math.abs(data[i][j][k]), 3) < Math.pow(Math.abs(data2[i][j][k]), 3)
                                 && average(data[i][j]) < data2[i][j][k] && (i + 1) * (j + 1) > 0)
                             data2[i][j][k] *= 2;
                         else
                             continue;
                     }
                 }
             }
 
             // Write processed data to the file
             for (i = 0; i < data2.length; i++) {
                 for (j = 0; j < data2[0].length; j++) {
                     out.write(data2[i][j] + "\t");
                 }
             }
 
             // Close the BufferedWriter
             out.close();
 
         } catch (IOException e) {
             // Handle IOException by printing an error message
             // -getMassage- an  error message can give you details about what went wrong
             System.out.println("Error= " + e.getMassage);
         }
     }
 }
 